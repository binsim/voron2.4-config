[include fluidd.cfg]
[include stealthburner_leds.cfg]
[include nozzle_scrub.cfg]
[include KAMP_Settings.cfg]
[include shake_n_tune.cfg]
[exclude_object]
[mcu]
#serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_160033000D51313339373836-if00
canbus_uuid: 055b0a37fd7b

[include EBB_CAN.cfg]

[virtual_sdcard]
path: /home/voron/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[printer]
kinematics: corexy
max_velocity: 300  
max_accel: 3000    			#Max 4000
max_z_velocity: 15 			#Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

[input_shaper]
shaper_freq_x: 50.0 # center frequency for the X axis filter
shaper_type_x: ei # filter type for the X axis
shaper_freq_y: 31.8 # center frequency for the Y axis filter
shaper_type_y: mzv # filter type for the Y axis
damping_ratio_x: 0.075 # damping ratio for the X axis
damping_ratio_y: 0.059 # damping ratio for the Y axis

[temperature_sensor MCU]
sensor_type: temperature_mcu

[temperature_sensor SoC]
sensor_type: temperature_host


#####################################################################
# 	X/Y Stepper Settings
#####################################################################

## X Stepper on Motor1(B Motor)
[stepper_x]
step_pin: PE6
dir_pin: PE5
enable_pin: !PC14
microsteps: 16
rotation_distance: 40
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: EBBCan:gpio24
position_min: 0
position_endstop: 350
position_max: 350
homing_speed: 25   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PC13
interpolate: True
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

## Y Stepper on Motor2 (A Motor)
[stepper_y]
step_pin: PE2
dir_pin: PE1
enable_pin: !PE4
microsteps: 16
rotation_distance: 40
endstop_pin: ^PF3
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
position_min: 0
position_endstop: 355
position_max: 355
homing_speed: 25  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PE3
interpolate: True
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
# 	Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left on MOTOR3_A
[stepper_z]
step_pin: PB8
dir_pin: PB7
enable_pin: !PE0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16
endstop_pin: probe:z_virtual_endstop

position_max: 340
position_min: -5
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PB9
interpolate: true
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##	Z1 Stepper - Rear Left on Motor5
[stepper_z1]
step_pin: PG13
dir_pin: !PG12
enable_pin: !PG15
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PG14
interpolate: true
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##	Z2 Stepper - Rear Right on Motor6
[stepper_z2]
step_pin: PG9
dir_pin: PD7
enable_pin: !PG11
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PG10
interpolate: true
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##	Z3 Stepper - Front Right on Motor7
[stepper_z3]
step_pin: PD4
dir_pin: !PD3
enable_pin: !PD6
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z3]
uart_pin: PD5
interpolate: true
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
# 	Fan Control
#####################################################################
[include nevermore.cfg]     #FAN0: pin: PF7

# [heater_fan controller_fan_0]
# #	Exhaust fan - CNC_FAN1
# pin: PF9
# kick_start_time: 0.5
# heater: heater_bed
# heater_temp: 45.0

[temperature_fan controller_fan_0]
pin: PF9
sensor_type: temperature_host
# sensor_mcu: temperature_mcu
control: watermark
min_temp: 10
max_temp: 65
target_temp: 45

[heater_fan controller_fan_1]
#	Exhaust fan - CNC_FAN2
pin: PF6
kick_start_time: 0.5
heater: heater_bed
heater_temp: 45.0

[heater_fan exhaust_fan]
#	Exhaust fan - CNC_FAN3
pin: PF8
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0
heater: heater_bed
heater_temp: 60
fan_speed: 1.0

#[heater_fan fan4]
#pin: PA4

#[heater_fan fan5]
#pin: PA6
#tachometer_pin: PC2

#[heater_fan fan6]
#pin: PA2
#tachometer_pin: PC1

#####################################################################
# 	Bed Heater
#####################################################################

[heater_bed]
##	SSR Pin - HE1
heater_pin: PA1
sensor_type: Generic 3950
sensor_pin: PB1
##  Adjust max_power so it doesn't exceed the SSR rating. The Omron G3NA-210B-DC5 SSR is rated at 4 amps without a heatsink.
##  The formula is "4 / (Wattage_of_bed_heater / Mains_voltage) = max_power" [10 / (650 / 230)] = 3,53
##  If max_power is greater than 1.0, use 1.0
# max_power: 0.6
max_power: 1.0
min_temp: 0
max_temp: 120
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769


#####################################################################
# 	Probe
#####################################################################

[probe]
##	Inductive Probe
##	This probe is not used for Z height, only Quad Gantry Leveling
##  NPN and PNP proximity switch types can be set by jumper
pin: ^EBBCan:gpio22
x_offset: 0
y_offset: 0
z_offset: -1.500
speed: 10.0
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.006
samples_tolerance_retries: 3

activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

#####################################################################
# 	LED Control
#####################################################################

[output_pin caselight]
# Chamber Lighting - HE2 Connector (Optional)
pin: PA3
pwm:true
shutdown_value: 0
value:0
cycle_time: 0.01

[filament_switch_sensor ToolHead]
pause_on_runout: True
runout_gcode:
    PARK_MACRO
    M117 Out of Filament
insert_gcode:
    M117 Resuming
    RESUME_MACRO
event_delay: 3.0
pause_delay: 0.5
switch_pin: EBBCan:gpio21

#####################################################################
# 	Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

[safe_z_home]
##	XY Location of the Z Endstop Switch
##	Update -10,-10 to the XY coordinates of your endstop pin 
##	(such as 157,305) after going through Z Endstop Pin
##	Location Definition step.
home_xy_position:170,170
speed:100
z_hop:10

[quad_gantry_level]
##	Use QUAD_GANTRY_LEVEL to level a gantry.
##	Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##	MAX (250, 250), (300,300), or (350,350) depending on your printer size
##	to respective belt positions

##	Gantry Corners for 350mm Build
gantry_corners:
	-60,-10
	410,420
#	Probe points
points:
	50,25
	50,275
	300,275
	300,25

#--------------------------------------------------------------------
speed: 100
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.01
max_adjust: 10

# [board_pins]
# aliases:
#     # EXP1 header
#     EXP1_1=PE7, EXP1_2=PG1,
#     EXP1_3=PG0, EXP1_4=PF15,
#     EXP1_5=PF14, EXP1_6=PF13,    # Slot in the socket on this side
#     EXP1_7=PF12, EXP1_8=PF11,
#     EXP1_9=<GND>, EXP1_10=<5V>,

#     # EXP2 header
#     EXP2_1=PE13, EXP2_2=PE12,
#     EXP2_3=PE15, EXP2_4=PE11,
#     EXP2_5=PE10, EXP2_6=PE14,      # Slot in the socket on this side
#     EXP2_7=PE8, EXP2_8=<RST>,
#     EXP2_9=<GND>, EXP2_10=<NC>

# # See the sample-lcd.cfg file for definitions of common LCD displays.

[bed_mesh]
speed: 500
mesh_min: 40, 40
mesh_max: 310, 310
horizontal_move_z: 20
# zero_reference_position: 175,175 # TAP should not use zero_reference_position
adaptive_margin: 20
probe_count: 7, 7
algorithm: bicubic
bicubic_tension: .5

#####################################################################
# 	Macros
#####################################################################

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28

    G0 X175 Y175 Z30 F3600
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}

    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

    SET_PRESSURE_ADVANCE SMOOTH_TIME=0.04

    EXCLUDE_OBJECT_DEFINE #KAMP
    
    M140 S{target_bed}                                  # Sets the target temp for the bed dont wait
    
      # Homes the printer if not already done, sets absolute positioning
    {% if "xyz" not in printer.toolhead.homed_axes %}
        STATUS_HOMING
        RESPOND TYPE=command MSG='Homing XYZ'
        G28                   # Full home (XYZ)
    {% else %}
        RESPOND TYPE=command MSG='XYZ already homed, skipping Homing'
    {% endif %}

    SET_IDLE_TIMEOUT TIMEOUT=18000 #set idle timeout to 5h to prevent issues when print is paused

    G90                   # Absolut position

    STATUS_HEATING
    SET_DISPLAY_TEXT MSG="wait for bed: {target_bed}c"           # Displays info
    RESPOND TYPE=command MSG='wait for bed: {target_bed}c'

    G0 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    
    M104 S150                                           # Heats the nozzle to 150 for qad and bed meshing don´t wait for temp
    M190 S{target_bed}                                  # Sets the target temp for the bed wait for temp

    #Quad Gantry Leveling if not already done
    {% if printer.quad_gantry_level.applied == False %}
        STATUS_CLEANING
        clean_nozzle

        STATUS_LEVELING
        SET_DISPLAY_TEXT MSG="Quad Gantry Leveling"      # Displays info
        RESPOND TYPE=command MSG='Quad Gantry Leveling'
        QUAD_GANTRY_LEVEL               # Levels the buildplate via QGL

        STATUS_HOMING
        G28                            # Homes axes again after QGL
    {% else %}
        SET_DISPLAY_TEXT MSG="Quad Gantry Leveling already done, skipping..."
        RESPOND TYPE=command MSG='Quad Gantry Leveling already done, skipping...'
    {% endif %}

    STATUS_MESHING
    SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
    RESPOND TYPE=command MSG='Bed mesh'
    BED_MESH_CALIBRATE

    STATUS_HEATING
    SET_DISPLAY_TEXT MSG="wait for nozzle: {target_extruder}c" 
    RESPOND TYPE=command MSG='wait for bed: {target_extruder}c'

    SMART_PARK
    M109 S{target_extruder}                                       # Heats the nozzle to printing temp wait for temp

    LINE_PURGE
    
    STATUS_PRINTING
    SET_DISPLAY_TEXT MSG="Printing..."
    RESPOND TYPE=command MSG='Printing...'

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    STATUS_BUSY

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-20.0 F3600                ; retract filament

    G90                            ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing

    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning

    STATUS_CLEANING
    clean_nozzle

    STATUS_READY
    BED_MESH_CLEAR

    # UPDATE_DELAYED_GCODE ID=nozzle_scrub_delayed DURATION=60 #scrub nozzle again after 1 min
    
    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 54.233
#*# pid_ki = 2.288
#*# pid_kd = 321.328

